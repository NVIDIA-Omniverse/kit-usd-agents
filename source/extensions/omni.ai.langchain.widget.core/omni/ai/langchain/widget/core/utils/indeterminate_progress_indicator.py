## Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
##
## NVIDIA CORPORATION and its licensors retain all intellectual property
## and proprietary rights in and to this software, related documentation
## and any modifications thereto.  Any use, reproduction, disclosure or
## distribution of this software and related documentation without an express
## license agreement from NVIDIA CORPORATION is strictly prohibited.
##

import asyncio
import weakref
from typing import List, Tuple

import omni.kit.app
import omni.ui as ui

# Ref: https://m2.material.io/components/progress-indicators/android#using-progress-indicators
MATERIAL_DESIGN_ANIMATION = [
    [(19.298245614035086, 100.0)],
    [(24.210526315789473, 100.0)],
    [(32.280701754385966, 100.0)],
    [(37.54385964912281, 100.0)],
    [(43.15789473684211, 100.0)],
    [(0.0, 0.7017543859649122), (51.2280701754386, 100.0)],
    [(0.0, 1.7543859649122806), (56.84210526315789, 100.0)],
    [(0.0, 4.2105263157894735), (65.26315789473685, 100.0)],
    [(0.0, 6.315789473684211), (70.52631578947368, 100.0)],
    [(0.0, 8.771929824561402), (75.78947368421053, 100.0)],
    [(0.0, 13.333333333333334), (83.50877192982456, 100.0)],
    [(0.0, 16.49122807017544), (88.0701754385965, 100.0)],
    [(0.0, 21.75438596491228), (94.38596491228071, 100.0)],
    [(0.0, 25.6140350877193), (97.89473684210527, 100.0)],
    [(0.0, 29.47368421052631), (99.64912280701755, 100.0)],
    [(0.0, 35.78947368421053)],
    [(0.0, 40.35087719298245)],
    [(0.0, 47.368421052631575)],
    [(0.0, 52.28070175438596)],
    [(0.0, 57.19298245614035)],
    [(0.0, 65.26315789473685)],
    [(4.56140350877193, 70.52631578947368)],
    [(17.192982456140353, 78.94736842105263)],
    [(25.263157894736842, 84.91228070175438)],
    [(32.98245614035088, 90.87719298245615)],
    [(44.21052631578947, 100.0)],
    [(51.578947368421055, 100.0)],
    [(61.75438596491228, 100.0)],
    [(0.0, 5.964912280701754), (68.42105263157895, 100.0)],
    [(0.0, 16.140350877192983), (74.3859649122807, 100.0)],
    [(0.0, 31.929824561403507), (82.45614035087719, 100.0)],
    [(0.0, 42.45614035087719), (87.71929824561403, 100.0)],
    [(0.0, 56.49122807017544), (94.03508771929825, 100.0)],
    [(0.0, 64.56140350877193), (97.19298245614036, 100.0)],
    [(0.0, 71.9298245614035), (99.29824561403508, 100.0)],
    [(0.0, 81.40350877192982)],
    [(0.0, 86.66666666666667)],
    [(0.0, 93.33333333333333)],
    [(0.0, 96.14035087719299)],
    [(0.0, 98.24561403508771)],
    [(0.0, 100.0)],
    [(0.0, 100.0)],
    [(2.456140350877193, 100.0)],
    [(5.964912280701754, 100.0)],
    [(9.824561403508772, 100.0)],
    [(16.49122807017544, 100.0)],
    [(21.75438596491228, 100.0)],
    [(29.47368421052631, 100.0)],
    [(34.73684210526316, 100.0)],
    [(40.35087719298245, 100.0)],
    [(0.0, 0.3508771929824561), (48.771929824561404, 100.0)],
    [(0.0, 1.0526315789473684), (54.03508771929825, 100.0)],
    [(0.0, 3.1578947368421053), (62.4561403508772, 100.0)],
    [(0.0, 5.263157894736842), (67.71929824561404, 100.0)],
    [(0.0, 7.368421052631578), (73.33333333333333, 100.0)],
    [(0.0, 11.578947368421053), (81.05263157894737, 100.0)],
    [(0.0, 14.736842105263156), (85.96491228070175, 100.0)],
    [(0.0, 20.0), (92.28070175438596, 100.0)],
    [(0.0, 23.50877192982456), (96.14035087719299, 100.0)],
    [(0.0, 27.368421052631582), (98.94736842105263, 100.0)],
    [(0.0, 33.68421052631579)],
    [(0.0, 38.24561403508772)],
    [(0.0, 44.91228070175438)],
    [(0.0, 49.473684210526315)],
    [(0.0, 54.736842105263165)],
    [(0.0, 62.4561403508772)],
    [(0.0, 67.71929824561404)],
    [(12.982456140350877, 76.14035087719299)],
    [(21.052631578947366, 81.75438596491227)],
    [(29.122807017543863, 87.71929824561403)],
    [(40.70175438596491, 96.84210526315789)],
    [(48.07017543859649, 100.0)],
    [(58.245614035087726, 100.0)],
    [(0.0, 1.7543859649122806), (64.91228070175438, 100.0)],
    [(0.0, 10.87719298245614), (71.2280701754386, 100.0)],
    [(0.0, 26.666666666666668), (80.0, 100.0)],
    [(0.0, 37.19298245614035), (85.26315789473684, 100.0)],
    [(0.0, 51.578947368421055), (91.9298245614035, 100.0)],
    [(0.0, 60.35087719298245), (95.78947368421052, 100.0)],
    [(0.0, 68.42105263157895), (98.24561403508771, 100.0)],
    [(0.0, 78.24561403508771)],
    [(0.0, 84.56140350877193)],
    [(0.0, 91.22807017543859)],
    [(0.0, 94.73684210526315)],
    [(0.0, 97.19298245614036)],
    [(0.0, 99.64912280701755)],
    [(0.0, 100.0)],
    [(1.4035087719298245, 100.0)],
    [(3.8596491228070176, 100.0)],
    [(7.719298245614035, 100.0)],
    [(14.385964912280702, 100.0)],
    [(19.298245614035086, 100.0)],
    [(27.017543859649123, 100.0)],
    [(32.280701754385966, 100.0)],
    [(37.54385964912281, 100.0)],
    [(45.96491228070175, 100.0)],
    [(0.0, 0.7017543859649122), (51.578947368421055, 100.0)],
    [(0.0, 2.456140350877193), (59.64912280701754, 100.0)],
    [(0.0, 4.2105263157894735), (65.26315789473685, 100.0)],
    [(0.0, 6.315789473684211), (70.52631578947368, 100.0)],
    [(0.0, 10.175438596491228), (78.59649122807018, 100.0)],
    [(0.0, 13.333333333333334), (83.50877192982456, 100.0)],
    [(0.0, 18.24561403508772), (90.52631578947368, 100.0)],
    [(0.0, 21.75438596491228), (94.38596491228071, 100.0)],
    [(0.0, 25.6140350877193), (97.89473684210527, 100.0)],
    [(0.0, 31.57894736842105)],
    [(0.0, 36.140350877192986)],
    [(0.0, 42.80701754385965)],
    [(0.0, 47.368421052631575)],
    [(0.0, 52.28070175438596)],
    [(0.0, 60.0)],
    [(0.0, 65.26315789473685)],
    [(8.771929824561402, 73.33333333333333)],
    [(17.192982456140353, 78.94736842105263)],
    [(25.263157894736842, 84.91228070175438)],
    [(36.84210526315789, 94.03508771929825)],
    [(44.56140350877193, 100.0)],
    [(55.08771929824562, 100.0)],
    [(61.75438596491228, 100.0)],
    [(0.0, 5.964912280701754), (68.42105263157895, 100.0)],
    [(0.0, 21.403508771929825), (77.19298245614034, 100.0)],
    [(0.0, 32.280701754385966), (82.80701754385966, 100.0)],
    [(0.0, 47.368421052631575), (89.82456140350877, 100.0)],
    [(0.0, 56.49122807017544), (94.03508771929825, 100.0)],
    [(0.0, 64.56140350877193), (97.19298245614036, 100.0)],
    [(0.0, 75.43859649122807)],
    [(0.0, 81.75438596491227)],
    [(0.0, 89.12280701754386)],
    [(0.0, 93.33333333333333)],
    [(0.0, 96.14035087719299)],
    [(0.0, 99.29824561403508)],
    [(0.0, 100.0)],
    [(0.3508771929824561, 100.0)],
    [(2.456140350877193, 100.0)],
    [(5.964912280701754, 100.0)],
    [(11.929824561403509, 100.0)],
]


class IndeterminateProgressIndicator:
    """
    A class used to represent an indeterminate progress indicator.
    """

    def __init__(self, **kwargs):
        self._root = ui.HStack(**kwargs)
        with self._root:
            ui.Spacer()
            with ui.ZStack(width=ui.Percent(50), height=5):
                ui.Rectangle(style_type_name_override="Progress")
                self._frame = ui.Frame(build_fn=lambda s=self.__weak(): s.build_fn(), height=5)
            ui.Spacer()
        self._counter: int = 0
        self._task = None

    @property
    def visible(self):
        if self._root:
            return self._root.visible

    @visible.setter
    def visible(self, value: bool):
        if self._root:
            self._root.visible = value

    async def rebuild_async(self):
        """
        Asynchronously rebuild the progress bar after waiting for updates.
        """
        for _ in range(2):
            await omni.kit.app.get_app().next_update_async()
        self._frame.rebuild()

    def build_fn(self):
        """
        Function that builds the progress bar.
        It selects the next frame for the animation and triggers a rebuild.
        """
        sequence = MATERIAL_DESIGN_ANIMATION[self._counter]

        self.draw_bar(sequence)

        self._counter += 1
        if self._counter >= len(MATERIAL_DESIGN_ANIMATION):
            self._counter = 0

        self._task = asyncio.ensure_future(self.rebuild_async())

    def draw_bar(self, ranges: List[Tuple[float]]):
        """
        Draw a progress bar based on a list of intervals indicating what
        portions of the bar should be highlighted.

        Parameters

            ranges : list of tuples
                Each tuple represents an interval to be highlighted on the
                progress bar.
        """
        with ui.HStack():
            last = 0.0
            for rng in ranges:
                start, end = rng
                # Draw transparent bar
                if start > last:
                    ui.Spacer(width=ui.Percent(start - last))
                # Draw highlighted
                ui.Rectangle(width=ui.Percent(end - start), style_type_name_override="Progress", name="highlight")
                last = end
            # Draw the last bar if needed
            if last < 100.0:
                ui.Spacer(width=ui.Percent(100.0 - last))

    def __del__(self):
        """
        Destruct and clean up the task associated with the progress bar.
        """
        if self._task:
            self._task.cancel()
        if self._root:
            self._root.clear()
            self._root.destroy()
            self._root = None

    def __weak(self):
        """
        Return a weak reference proxy to itself, allowing the instance to be
        garbage collected if need be.
        """

        def cleanup(s):
            if s._root:
                s._root.clear()
                s._root.destroy()
                s._root = None
            if s._task:
                s._task.cancel()
                s._task = None

        return weakref.proxy(self, lambda s=self: cleanup(self))
